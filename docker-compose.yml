services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-myapp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      TZ: Europe/Moscow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-myapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    user: botuser
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-myapp}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ERROR_CHAT_ID: ${ERROR_CHAT_ID}
      ADMIN_TELEGRAM_ID: ${ADMIN_TELEGRAM_ID}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-bot.log}
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "127.0.0.1:5050:5050"
    environment:
      FLASK_SECRET: ${FLASK_SECRET:-dev}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-web.log}
      TZ: Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./flask_session:/app/flask_session
    networks:
      - bot_network
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.bot
    command: celery -A bot.tasks.celery_app worker --loglevel=info --pool=solo
    user: botuser
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-myapp}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ADMIN_TELEGRAM_ID: ${ADMIN_TELEGRAM_ID}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-celery_worker.log}
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.bot
    command: celery -A bot.tasks.celery_app beat --loglevel=info --schedule=/app/celery_data/celerybeat-schedule
    user: botuser
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secret}@postgres:5432/${POSTGRES_DB:-myapp}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ADMIN_TELEGRAM_ID: ${ADMIN_TELEGRAM_ID}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-celery_beat.log}
      TZ: Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./celery_data:/app/celery_data
    networks:
      - bot_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  celery_data:
    driver: local

networks:
  bot_network:
    driver: bridge