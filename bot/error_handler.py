from aiogram import Dispatcher, Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.types import ErrorEvent, Update
import traceback
import pendulum

from bot.logger import setup_logger
from shared.config import settings

ERROR_CHAT_ID = settings.ERROR_CHAT_ID
logger = setup_logger("error")


def escape_html(text: str) -> str:
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


def get_user_info(update: Update):
    if not update:
        return None, None, None
    if update.message:
        user = update.message.from_user
        return user.id, user.full_name, update.message.text
    elif update.callback_query:
        user = update.callback_query.from_user
        return user.id, user.full_name, update.callback_query.data
    return None, None, None


def get_traceback(exc: Exception):
    tb = traceback.format_exception(type(exc), exc, exc.__traceback__)
    snippet = "".join(tb[-4:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å—Ç—Ä–æ–∫–∏
    return escape_html(snippet[:2000])  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram


def get_location(exc: Exception):
    tb = traceback.extract_tb(exc.__traceback__)
    if not tb:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    last = tb[-1]
    filename = escape_html(last.filename)
    line = last.lineno
    func = escape_html(last.name)
    code_line = escape_html(last.line.strip()) if last.line else "???"
    return (
        f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
        f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
        f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
        f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
    )


def setup_error_handler(dp: Dispatcher, bot: Bot):
    @dp.errors()
    async def error_handler(event: ErrorEvent):
        exc = event.exception
        update = event.update

        filename = exc.__traceback__.tb_frame.f_code.co_filename
        line = exc.__traceback__.tb_lineno
        logger.error(
            f"Unhandled error: {type(exc).__name__} at {filename}:{line} - {str(exc)}"
        )

        user_id, user_name, user_msg = get_user_info(update)
        location = get_location(exc)
        tb_snippet = get_traceback(exc)

        now = pendulum.now("Europe/Moscow").format("YYYY-MM-DD HH:mm:ss ZZ")

        admin_message = (
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {now}\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {escape_html(user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üÜî <b>ID:</b> {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {escape_html(user_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {escape_html(type(exc).__name__)}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html(str(exc))}\n\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{location}\n\n"
            f"üìö <b>–¢—Ä–µ–π—Å–±–µ–∫:</b>\n<pre>{tb_snippet}</pre>"
        )

        try:
            await bot.send_message(ERROR_CHAT_ID, admin_message, parse_mode="HTML")
        except TelegramAPIError as tg_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {tg_error}")
