from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from bot.fsm.registration import Registration
from db.schemas import UserCreate
from bot.core.repositories.user_repository import UserRepository
from bot.core.repositories.group_admin_repository import GroupAdminRepository
from bot.texts import (
    NAME_TOO_SHORT,
    ASK_BIRTH_DATE,
    INVALID_DATE_FORMAT,
    REGISTRATION_SUCCESS,
    EVENT_ERROR,  # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
)
from bot.logger import setup_logger
from datetime import datetime

router = Router()
logger = setup_logger("registration")


def get_command_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üç∫ –í—ã–±—Ä–∞—Ç—å –ø–∏–≤–æ", callback_data="select_beer")
    )
    builder.add(InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    builder.adjust(2)
    return builder.as_markup()


@router.message(Registration.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer(NAME_TOO_SHORT)
        return
    await state.update_data(name=name)
    await state.set_state(Registration.birth_date)
    await message.answer(ASK_BIRTH_DATE)


@router.message(Registration.birth_date)
async def get_birth_date(message: Message, state: FSMContext, session: AsyncSession):
    raw = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    birth_date = None

    if raw.lower() not in ["-", "–Ω–µ—Ç", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
        try:
            if raw.count(".") == 1:
                birth_date = datetime.strptime(raw, "%d.%m").replace(year=1900).date()
            elif raw.count(".") == 2:
                birth_date = datetime.strptime(raw, "%d.%m.%Y").date()
            else:
                raise ValueError
        except ValueError:
            await message.answer(INVALID_DATE_FORMAT)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    group_id = data["group_id"]
    if not await GroupAdminRepository.group_admin_exists(session, group_id):
        logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ GroupAdmin")
        await message.answer(EVENT_ERROR)
        await state.clear()
        return

    user_data = UserCreate(
        telegram_id=user_id,
        username=username,
        name=data["name"],
        birth_date=birth_date,
        registered_from_group_id=group_id,
    )

    try:
        user = await UserRepository.create_user(session, user_data)
        await message.answer(REGISTRATION_SUCCESS, reply_markup=get_command_keyboard())
        await state.clear()
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer(EVENT_ERROR)
        await state.clear()
