# import os
# import asyncio
# from celery import shared_task
# from aiogram import Bot
# from sqlalchemy.ext.asyncio import AsyncSession
# from bot.core.repositories.event_repository import EventRepository
# from bot.core.repositories.beer_repository import BeerRepository
# from bot.texts import BARTENDER_NOTIFICATION
# from bot.logger import setup_logger
# from db.database import get_async_session_context
# import pendulum
#
# from db.models import Event
#
# logger = setup_logger(__name__)
#
# BOT_TOKEN = os.getenv("BOT_TOKEN")
# ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "0"))
#
#
# async def send_bartender_notification(bot: Bot, event: Event, session: AsyncSession):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –æ –∑–∞–∫–∞–∑–∞—Ö –ø–∏–≤–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ."""
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
#         stats = await BeerRepository.get_event_beer_orders(session, event.id)
#         participants = stats["participants"]
#         beer_orders = stats["beer_orders"]
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–∏–≤–∞
#         beer_orders_str = ""
#         if event.has_beer_choice and event.beer_option_1 and event.beer_option_2:
#             # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä –ø–∏–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#             beer_orders_str += (
#                 f"üçª {event.beer_option_1}: {beer_orders.get(event.beer_option_1, 0)}\n"
#             )
#             beer_orders_str += (
#                 f"üçª {event.beer_option_2}: {beer_orders.get(event.beer_option_2, 0)}"
#             )
#         else:
#             # –ï—Å–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –õ–∞–≥–µ—Ä
#             beer_orders_str += f"üçª –õ–∞–≥–µ—Ä: {beer_orders.get('–õ–∞–≥–µ—Ä', participants)}"
#
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
#         event_date = event.event_date.strftime("%d.%m.%Y")
#         event_time = event.event_time.strftime("%H:%M")
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         message_text = BARTENDER_NOTIFICATION.format(
#             name=event.name,
#             date=event_date,
#             time=event_time,
#             participants=participants,
#             beer_orders=beer_orders_str,
#         )
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message_text)
#         logger.info(
#             f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}: {message_text}"
#         )
#     except Exception as e:
#         logger.error(
#             f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ä–º–µ–Ω—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}: {e}",
#             exc_info=True,
#         )
#         raise
#
#
# @shared_task(bind=True, ignore_result=True)
# def process_event_notification(self, event_id: int):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
#     bot = None
#     loop = None
#     try:
#         bot = Bot(token=BOT_TOKEN)
#         try:
#             loop = asyncio.get_event_loop()
#         except RuntimeError:
#             loop = asyncio.new_event_loop()
#             asyncio.set_event_loop(loop)
#
#         async def run():
#             async with get_async_session_context() as session:
#                 event = await EventRepository.get_event_by_id(session, event_id)
#                 if not event:
#                     logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#                     return
#                 await send_bartender_notification(bot, event, session)
#
#         loop.run_until_complete(run())
#     except Exception as e:
#         logger.error(
#             f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True
#         )
#         raise
#     finally:
#
#         async def close_bot():
#             if bot:
#                 await bot.session.close()
#
#         if loop:
#             loop.run_until_complete(close_bot())
#             loop.close()
import os
import asyncio
from celery import shared_task
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from bot.core.repositories.event_repository import EventRepository
from bot.core.repositories.beer_repository import BeerRepository
from bot.texts import BARTENDER_NOTIFICATION
from bot.logger import setup_logger
from db.database import get_async_session_context
import pendulum

from db.models import Event

logger = setup_logger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "0"))


async def send_bartender_notification(bot: Bot, event: Event, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –æ –∑–∞–∫–∞–∑–∞—Ö –ø–∏–≤–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        stats = await BeerRepository.get_event_beer_orders(session, event.id)
        participants = stats["participants"]
        beer_orders = stats["beer_orders"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–∏–≤–∞
        beer_orders_str = ""
        if event.has_beer_choice and event.beer_option_1 and event.beer_option_2:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä –ø–∏–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            beer_orders_str += (
                f"üçª {event.beer_option_1}: {beer_orders.get(event.beer_option_1, 0)}\n"
            )
            beer_orders_str += (
                f"üçª {event.beer_option_2}: {beer_orders.get(event.beer_option_2, 0)}"
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –õ–∞–≥–µ—Ä
            beer_orders_str += f"üçª –õ–∞–≥–µ—Ä: {beer_orders.get('–õ–∞–≥–µ—Ä', participants)}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        event_date = event.event_date.strftime("%d.%m.%Y")
        event_time = event.event_time.strftime("%H:%M")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = BARTENDER_NOTIFICATION.format(
            name=event.name,
            date=event_date,
            time=event_time,
            participants=participants,
            beer_orders=beer_orders_str,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message_text)
        logger.info(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}: {message_text}"
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ä–º–µ–Ω—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}: {e}",
            exc_info=True,
        )
        raise


@shared_task(bind=True, ignore_result=True)
def process_event_notification(self, event_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
    logger.info(f"Processing notification task for event {event_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    try:
        loop = asyncio.get_event_loop()
        if loop.is_closed():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    async def main():
        bot = Bot(token=BOT_TOKEN)
        try:
            async with get_async_session_context() as session:
                event = await EventRepository.get_event_by_id(session, event_id)
                if not event:
                    logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                await send_bartender_notification(bot, event, session)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}",
                exc_info=True,
            )
            raise self.retry(exc=e, countdown=60)  # Retry after 60 seconds
        finally:
            await bot.session.close()

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        loop.run_until_complete(main())
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True
        )
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞–º–∏
        if not loop.is_closed():
            loop.close()
