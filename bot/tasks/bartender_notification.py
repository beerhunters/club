from celery import shared_task
from sqlalchemy.ext.asyncio import AsyncSession
from db.database import get_async_session
from bot.core.repositories.event_repository import EventRepository
from bot.logger import setup_logger
from aiogram import Bot
from db.models import Event
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
logger = setup_logger(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "0"))


async def send_bartender_notification(bot: Bot, event: Event):
    try:
        message_text = (
            f"üç∫ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ '{event.name}' —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {event.event_time.strftime('%H:%M')}\n"
            f"üìç –ú–µ—Å—Ç–æ: {event.location_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üçª –ü–∏–≤–æ: {f'{event.beer_option_1}, {event.beer_option_2}' if event.has_beer_choice else '–õ–∞–≥–µ—Ä'}"
        )
        await bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message_text)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ä–º–µ–Ω—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id}: {e}",
            exc_info=True,
        )
        raise


@shared_task(bind=True, ignore_result=True)
def process_event_notification(self, event_id: int):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
    bot = None
    loop = None
    try:
        bot = Bot(token=BOT_TOKEN)
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

        async def run():
            async for session in get_async_session():
                event = await EventRepository.get_event_by_id(session, event_id)
                if not event:
                    logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫")
                    return
                await send_bartender_notification(bot, event)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_id}")

        loop.run_until_complete(run())
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True
        )
        raise self.retry(exc=e, countdown=60)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    finally:
        if bot:

            async def close_bot():
                await bot.session.close()

            loop.run_until_complete(close_bot())
